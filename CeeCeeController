#!/usr/bin/env python3

import serial
import RPi.GPIO as GPIO
import time
import numpy as np

#------- Pygame & Controller Setup ---------

import pygame
from pygame.locals import *

##initialize pygame
pygame.init()
clock = pygame.time.Clock()

#intialize joystick
pygame.joystick.init()
joystick = [pygame.joystick.Joystick(i) for i in range(pygame.joystick.get_count())]

#left joystic filtering
axis_0 = [10,10,10]
axis_1 = [10,10,10]
avg_0 = 20
avg_1 = 20

#right joystick filtering
axis_2 = [10,10,10]
axis_3 = [10,10,10]
avg_2 = 20
avg_3 = 20

# ----- GPIO + Arduino Serial Setup -----
GPIO.setmode(GPIO.BCM)

ser = serial.Serial('/dev/ttyACM0', 115200, timeout=1.0)
time.sleep(3)
ser.reset_input_buffer()
print("Serial OK")

def wait_for_ready():
    response = ""
    while response != "Ready":
        if ser.in_waiting > 0:
            response = ser.readline().decode('utf-8').rstrip()
            print(response)
        time.sleep(0.01)

# ----- Main Logic -----
try:
	while True:
		for event in pygame.event.get():
			if event.type ==JOYBUTTONDOWN:
	 
				#Generic Buttons
				if (event.button == 0):
					print('a pressed')                
					ser.write(b"pickup\n")
					wait_for_ready()
				if (event.button == 1):
					print('b pressed')                
					ser.write(b"drop\n")
					wait_for_ready()
				if (event.button == 3):
					print('x pressed')                
					ser.write(b"startpos\n")
					wait_for_ready()
				if (event.button == 4):
					print('y pressed')                
					ser.write(b"startpos1\n")
					wait_for_ready()

				#Bumper Buttons
				if (event.button == 6):
					print('left bumper pressed')                
					ser.write(b"minicounterclockwise\n")
					wait_for_ready()
				if (event.button == 7):
					print('right bumper pressed')                
					ser.write(b"miniclockwise\n")
					wait_for_ready()
				
				#Other Buttons
				if (event.button == 10):
					print('Select pressed')                
					ser.write(b"stepleft\n")
					wait_for_ready()
				if (event.button == 11):
					print('Start pressed')                
					ser.write(b"stepright\n")
					wait_for_ready()
				if (event.button == 12):
					print('Xbox pressed')                
					ser.write(b"calibratestepper\n")
					wait_for_ready()
				if (event.button == 13):
					print('LJoyStick pressed')                
					ser.write(b"counterclockwise\n")
					wait_for_ready()
				if (event.button == 14):
					print('RJoyStick pressed')                
					ser.write(b"clockwise\n")
					wait_for_ready()
				if (event.button == 15):
					print('Capture pressed')                
					ser.write(b"stepcenter\n")
					wait_for_ready() 
								  
			#Released Button
			if event.type ==JOYBUTTONUP:
				print('released')

			if event.type == JOYAXISMOTION:
				#Left Joystick
				if (event.axis ==0):
					axis_0.insert(0,event.value)
					axis_0.pop()
					avg_0 = sum(axis_0)/len(axis_0)
				elif(event.axis== 1):
					axis_1.insert(0,event.value)
					axis_1.pop()
					avg_1 = sum(axis_1)/len(axis_1)
				if (event.axis ==0) or (event.axis== 1):
					if (-.25<avg_0<.25) and (-1<avg_1<-.75):
						print('up')
					elif (-.75<avg_0<-.25) and (-.75<avg_1<-.25):
						print('up left')
					elif (-1<avg_0<-.75) and (-.25<avg_1<.25):
						print('left')
					elif (-.75<avg_0<-.25) and (.25<avg_1<.75):
						print('down left')
					elif (-.25<avg_0<.25) and (.75<avg_1<1):
						print('down')
					elif (.25<avg_0<.75) and (.25<avg_1<.75):
						print('down right')
					elif (.75<avg_0<1) and (-.25<avg_1<.25):
						print('right')
					elif (.25<avg_0<.75) and (-75<avg_1<-.25):
						print('up right')

				#Right Joystick
				if (event.axis ==2):
					axis_2.insert(0,event.value)
					axis_2.pop()
					avg_2 = sum(axis_2)/len(axis_2)
				elif(event.axis== 3):
					axis_3.insert(0,event.value)
					axis_3.pop()
					avg_3 = sum(axis_3)/len(axis_3)
				if (event.axis ==2) or (event.axis== 3):
					if (-.25<avg_2<.25) and (-1<avg_3<-.75):
						print('up')
					elif (-.75<avg_2<-.25) and (-.75<avg_3<-.25):
						print('up left')
					elif (-1<avg_2<-.75) and (-.25<avg_3<.25):
						print('left')
					elif (-.75<avg_2<-.25) and (.25<avg_3<.75):
						print('down left')
					elif (-.25<avg_2<.25) and (.75<avg_3<1):
						print('down')
					elif (.25<avg_2<.75) and (.25<avg_3<.75):
						print('down right')
					elif (.75<avg_2<1) and (-.25<avg_3<.25):
						print('right')
					elif (.25<avg_2<.75) and (-75<avg_3<-.25):
						print('up right')
			
				#Left Trigger
				if (event.axis == 5):
					print('left trigger')
					speed = 50
				#Right Trigger
				if (event.axis == 4):
					print('right trigger')
			
			if event.type == JOYHATMOTION:
				#DPAD up,down,left,right
				if (event.value == (1,0)):
					print('right dpad')                
					ser.write(b"right\n")
					wait_for_ready()
				if (event.value == (-1,0)):
					print('left dpad')                
					ser.write(b"left\n")
					wait_for_ready()
				if (event.value == (0,1)):
					print('up dpad')
					ser.write(b"forward\n")
					wait_for_ready()
				if (event.value == (0,-1)):
					print('down dpad')
					ser.write(b"backward\n")
					wait_for_ready()
				if (event.value == (0,0)):
					print('dpad released')                
					ser.write(b"stop\n")
					wait_for_ready()

except KeyboardInterrupt:
    print("Interrupted by user.")
    ser.write(b"stop\n")
    ser.close()

finally:
    GPIO.cleanup()
